A*-поиск. Его реализовывать существенно сложнее, поэтому возьмите его из моей методички. Там к нему приложены 3 варианта эвристик определения "расстояния до цели": тождественный нуль (т.е. отсутствие эвристик - слепой метод, но при этом годится для всех задач) и 2 варианта, предназначенных для решения "игры 8" (расст. Хемминга и манхеттенское). В принципе такие же можно для начала написать и для сокобана (количество ящиков не на своих местах и сумма минимальных количеств ходов, требуемых для перемещения каждого ящика при отсутствии других ящиков).
В A*-поиске совершенно не используются имена переходов (они там только мешают).
Поэтому, чтобы получить решение в виде списка переходов, нужно написать процедурку,
которая преобразует список состояний в список переходов, например, так:

алгоритм(X,P) :- 'A*'(X,Sol,_), pos2alg(Sol,[],P).

pos2alg([X,Y|T],Cs,Alg) :- переход(X,Y,C), pos2alg([Y|T],[C|Cs],Alg).
pos2alg([_],Alg,Alg).
pos2alg([],Alg,Alg).

Для определения самого перспективного узла алгоритм A* вычисляет для каждого узла некоторое значение (мы будет называть его значением f) и сортирует список открытых узлов по этому значению. Значение f вычисляется по двум другим значениям узла — значению g и значению h. Значение g — это суммарный вес всех операций, необходимых для достижения узла из исходного состояния. Значение h — это прогнозируемый вес для достижения цели из узла. В эвристическом поиске эта оценка является эвристической. Узлы с минимальными значениями f считаются самыми перспективными для посещения. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%просматриваем все коробки, предпочтительнее та, что ближе.
%сокобан должен перемещаться только в те позиции, с которых можно двигать коробки.
%как добавлять факты в программу, считывая данные из txt файла и обработав их.
%баним состояние если это угол (не являющийся конеыным состоянием) и если это крайевая клетка, дволь которой нет конечных состояний
%если мы поставили ящик на место, то пересматриваем забаненные состояния, в случае если по вертикали и по горизонтали больше нет конечных свободных позиций, то назначаем эту клетку (?столбец/стоку?) как забаненную.
%1. почему мы вообще двигаем один ящик через другой (проверить принадлежит ли клетка, куда мы перемещаем ящик списку запрещенных клеток, если нет то спокойно двигаем, ну еще стоит проверить не принадлежит ли эта клетка списку тупиковых НЕ финальных клеток)

JS graphic interface: https://birrell.org/andrew/sokoban/

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear_screen :- format('~c~s', [0x1b, "[2J"]). %clearing-screen-in-swipl-prolog-in-windows


Plain clear screen:

cls :- write('\e[2J').
Or with home reset:

cls :- write('\e[H\e[2J').